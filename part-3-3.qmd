# City of Lynchburg Housing Market Analysis

The following provides an analysis of major trends impacting housing within the City of Lynchburg. 


```{r}
#| label: setup

library(tidyverse)
library(tidyverse)
library(janitor)
library(ggplot2)
library(leaflet)
library(tigris)
library(sf)
library(ggiraph)
library(hdatools)
library(scales)
library(readxl)
library(ggtext)
library(tidytext)

lburg <- "51680"

```

## Takeaways

## Population trends

```{r}
#| label: pop-2020

# Read in population data and filter for Lynchburg.

pop_data <- read_rds("data/pop_data.rds") %>% 
  subset(GEOID %in% lburg)

# Join to names data frame (just in case) then select only the fields needed.

local_pop <- pop_data %>% 
  select(year, counttype, value) 

# Read in projections data to include in visualization and clean the data.

projections <- read_csv("data/uva_proj.csv") %>% 
  subset(FIPS %in% lburg) %>% 
  select(`2030`, `2040`, `2050`) %>% 
  pivot_longer(1:3,
               names_to = "year",
               values_to = "value") %>% 
  mutate(counttype = "Projection") %>% 
  select(year, counttype, value)

# Combine population estimates and projections into single data frame.

lburg_pop <- rbind(local_pop, projections)

# Visualize as colored bar chart. Showing different colors for count type (Census, estimate, and projection).
  
local_pop_plot <- ggplot(lburg_pop,
       aes(x = year,
           y = value,
           fill = counttype)) +
  geom_col() +
  theme_hfv() +
  scale_fill_hfv() +
  labs(title = "City of Lynchburg: Population",
       caption = "**Source:** U.S. Census Bureau, Decennial Census and Population Estimates Program and UVA, Weldon Cooper Center.") +
  scale_y_continuous(labels = label_comma(), limits = c(0, 100000)) +
  theme(legend.position = "right")

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_pop_plot,
         height_svg = 4)
  
} else {
  
  local_pop_plot
  
}


```

```{r}
#| label: fig-local-chg


# Read in components of population change data and filter for Lynchburg.

local_change <- read_rds("data/comp_data.rds") %>% 
  filter(NAMELSAD == "Lynchburg city")

# Create group bar chart showing population change by locality.

local_change_plot <- ggplot(local_change,
       aes(x = year, 
           y = value,
           fill = component)) +
  geom_col(position = "stack") +
  theme_hfv() +
  scale_fill_hfv() +
  theme(axis.text.x = element_text(size = 6, angle = 90),
        legend.position = "bottom") +
  labs(title = "City of Lynchburg: Components of population change",
       caption = "**Source:** U.S. Census Bureau, Population Estimates Program.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_change_plot,
         height_svg = 4)
  
} else {
  
  local_change_plot
  
}


```

## Household trends

```{r}
#| label: tenure

# Read in household tenure data and filter for Lynchburg.

b25003_data <- read_rds("data/b25003_data.rds") %>% 
  filter(NAME == "Lynchburg city")

# Clean data and calculate cumulative change in households by tenure.

local_tenure <- b25003_data %>%
  select(county = NAME, year, tenure, estimate) %>% 
  group_by(county, year, tenure) %>% 
  summarise(estimate = sum(estimate)) %>% 
  group_by(county, tenure) %>% 
  mutate(diff = estimate - lag(estimate),
         diff = replace_na(diff, 0)) %>% 
  mutate(run_diff = cumsum(diff)) %>%  
  filter(run_diff != 0) %>% 
  mutate(year = as.character(year))

# Create bar chart visualization that shows the cumulative change from 2010 to 2021.

local_tenure_plot <- ggplot(local_tenure,
       aes(x = year,
           y = run_diff,
           fill = tenure,
           data_id = run_diff,
           tooltip = label_number(big.mark = ",", style_positive = "plus", style_negative = "minus")(run_diff))) +
  geom_col(position = "dodge") +
  facet_wrap(~county, nrow = 1) +
  theme_hfv() +
  scale_fill_hfv() +
  scale_y_continuous(labels = label_number(big.mark = ",", style_positive = "plus", style_negative = "minus")) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.2, size = 8),
        legend.position = "bottom") +
  labs(title = "Cumulative change in households by tenure",
       subtitle = "From 2010 to 2021",
       caption = "U.S. Census Bureau, ACS 5-Year Estimates, Table B25003.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_tenure_plot,
         height_svg = 4)
  
} else {
  
  local_tenure_plot
  
}
  

```

```{r}
#| label: age

b25007_data <- read_rds("data/b25007_data.rds") %>% 
  filter(NAME == "Lynchburg city")
  
local_age <- b25007_data %>% 
  group_by(county = NAME, year, tenure, age) %>% 
  summarise(estimate = sum(estimate)) %>% 
  filter(year == 2010 | year == 2021) %>% 
  group_by(county, year, tenure) %>% 
  mutate(pct = estimate/sum(estimate)) %>% 
  mutate(year = as.character(year))

local_age_plot <- ggplot(local_age,
       aes(x = year, 
           y = pct,
           fill = age,
           data_id = pct,
           tooltip = percent_format()(pct)))  +
  geom_col(position = "dodge") +
  facet_grid(~tenure) +
  geom_col_interactive(size = 2) +
  theme_hfv() +
  scale_fill_hfv() +
  scale_y_continuous(labels = percent_format()) +
  theme(legend.position = "bottom") +
  labs(title = "City of Lynchburg: households by age and tenure",
       subtitle = "In 2010 and 2021",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B25007.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_age_plot,
         height_svg = 4)
  
} else {
  
  local_age_plot
}

```

```{r}
#| label: type

b11001_data <- read_rds("data/b11001_data.rds") %>% 
  filter(NAME != "Lynchburg city")


```

```{r}
#| label: size

b25009_data <- read_rds("data/b25009_data.rds") %>% 
  filter(NAME == "Lynchburg city")

local_size <- b25009_data %>% 
  select(county = NAME, year, tenure, size, estimate) %>% 
  group_by(county, year, tenure, size) %>% 
  summarise(estimate = sum(estimate))  %>%
  group_by(county, tenure, size) %>% 
  mutate(diff = estimate - lag(estimate),
         diff = replace_na(diff, 0)) %>% 
  mutate(run_diff = cumsum(diff)) %>%  
  filter(run_diff != 0) %>% 
  mutate(year = as.character(year))


local_size_plot <- ggplot(local_size,
       aes(x = year,
           y = run_diff,
           fill = tenure,
           data_id = run_diff,
           tooltip )) +
  geom_col(position = "dodge") +
  facet_grid(tenure~size) +
  theme_hfv() +
  scale_fill_hfv() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.2, size = 8)) +
  labs(title = "City of Lynchburg: Cumulative change in households by size and tenure",
       subtitle = "From 2010 to 2021",
       caption = "U.S. Census Bureau, ACS 5-Year Estimates, Table B25009.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_size_plot,
         height_svg = 4)
  
} else {
  
  local_size_plot
}
  


```

```{r}
#| label: senior

b09020_data <- read_rds("data/b09020_data.rds") %>% 
  filter(NAME == "Lynchburg city")

local_senior <- b09020_data %>% 
  select(county = NAME, year, family, relationship, estimate) %>% 
  group_by(county, year, family, relationship) %>% 
  summarise(estimate = sum(estimate)) %>% 
  pivot_wider(names_from = year,
              values_from = estimate) %>% 
  transform(change = `2021` - `2012`) %>% 
  select(county, family, relationship, change) %>% 
  mutate(family = str_replace(family, "Group quarters", " "),
         family = fct_relevel(family, "Family", "Nonfamily", " "))


local_senior_plot <- ggplot(local_senior,
       aes(y = reorder_within(relationship, change, family),
           x = change,
           fill = family,
           data_id = change,
           tooltip = change)) +
  geom_col(position = "dodge") +
  geom_col_interactive(position = "dodge", size = 2) +
  theme_hfv() +
  scale_fill_hfv() +
  scale_y_reordered() +
  scale_x_continuous(labels = label_number(big.mark = ",", style_positive = "plus", style_negative = "minus")) +
  facet_grid(rows = vars(family), scales = "free_y", space = "free", switch = "y") +
  #scale_y_discrete(labels = function(x) str_wrap(x, width = 10)) +
  labs(title = "City of Lynchburg: Change in senior population by living arrangement",
       subtitle="2016 to 2020",
       fill="Tenure",
       caption = "**Source:** U.S. Census Bureau, American Community Survey, Table B09020.")  +
  theme(strip.placement = "outside",
        panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_line(color = "#e2e4e3",
                                          size = 0.05)) +
  add_zero_line(axis = "x")
                              

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_senior_plot,
         height_svg = 4)
  
} else {
  
  local_senior_plot

}
  

```

```{r}
#| label: subfam

b11013_data <- read_rds("data/b11013_data.rds") %>% 
  filter(NAME == "Lynchburg city")

local_sub <- b11013_data %>% 
  select(county = NAME, year, subfamily, children, estimate) %>% 
  mutate(subfamily = case_when(
    subfamily == "Single father" ~ "Single parent",
    subfamily == "Single mother" ~ "Single parent",
    TRUE ~ subfamily
  )) %>% 
  group_by(county, year, subfamily, children) %>% 
  summarise(estimate = sum(estimate)) %>% 
  group_by(county, subfamily, children) %>% 
  mutate(diff = estimate - lag(estimate),
         diff = replace_na(diff, 0)) %>% 
  mutate(run_diff = cumsum(diff)) %>%  
  filter(run_diff != 0)

local_sub_plot <- ggplot(local_sub,
                         aes(x = year,
                             y = run_diff,
                             fill = subfamily,
                             data_id = run_diff,
                             tooltip = label_number(big.mark = ",", style_positive = "plus", style_negative = "minus")(run_diff))) +
  geom_col(position = "dodge") +
  geom_col_interactive() +
  facet_wrap(~children) +
  theme_hfv() +
  scale_fill_hfv() +
  scale_y_continuous(labels = label_number(big.mark = ",", style_positive = "plus", style_negative = "minus")) +
  theme(legend.position = "bottom",
        axis.text.x = element_blank()) +
  labs(title = "City of Lynchburg: Change in families living with others",
       subtitle = "From 2010 to 2021",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B11013.")


if (knitr::is_html_output()) {
  
  girafe(ggobj = local_sub_plot,
         height_svg = 4)
  
} else {
  
  local_sub_plot
  
}


```

```{r}
#| label: achild

b09021_data <- read_rds("data/b09021_data.rds") %>% 
  filter(NAME == "Lynchburg city")

local_achild <- b09021_data %>% 
  select(county = NAME, year, arrangement, estimate) %>% 
  filter(arrangement == "Child of householder") %>% 
  group_by(county, arrangement) %>% 
  mutate(diff = estimate - lag(estimate),
         diff = replace_na(diff, 0)) %>% 
  mutate(run_diff = cumsum(diff)) %>%  
  filter(run_diff != 0) %>% 
  mutate(year = as.character(year))


local_achild_plot <- ggplot(local_achild,
                            aes(x = year,
                                y = run_diff,
                                fill = run_diff,
                                data_id = run_diff,
                                tooltip = label_number(big.mark = ",", style_negative = "minus", style_positive = "plus")(run_diff))) +
  geom_col(position = "dodge") +
  geom_col_interactive() +
  scale_y_continuous(labels = label_number(big.mark = ",", style_positive = "plus", style_negative = "minus")) +
  theme_hfv() +
  scale_fill_hfv() +
  labs(title = "City of Lynchburg: Cumulative change in adult children living with parents",
       subtitle = "From 2015 to 2021",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B09021.") +
  scale_fill_gradientn(colours = c("#ADDCB1", "#46A88F", "#207A88", "#0F1A4E"))


if (knitr::is_html_output()) {
  
  girafe(local_achild_plot,
         height_svg = 4)
  
} else {
  
  local_achild_plot
}


```


## Economic trends

```{r}
#| label: inc-dist

b25118_data <- read_rds("data/b25118_data.rds") %>% 
  filter(NAME == "Lynchburg city")

local_dist <- b25118_data %>% 
  select(county = NAME, year, tenure, income, estimate) %>% 
  group_by(county, year, tenure, income) %>% 
  summarise(estimate = sum(estimate)) %>% 
  filter(year == 2010 | year == 2021) %>% 
  mutate(year = as.character(year))


level_order <- c("Less than $15,000", "$15,000 to $24,999", "$25,000 to $49,999", "$50,000 to $74,999", "$75,000 to $99,999", "$100,000 to $149,999", "$150,000 or more")


local_dist_plot <- ggplot(local_dist,
       aes(x = factor(income, level = level_order),
           y = estimate,
           fill = tenure,
           data_id = estimate,
           tooltip = label_comma()(estimate))) +
  geom_col(position = "dodge") +
  geom_col_interactive() +
  facet_grid(tenure~year) +
  scale_fill_hfv() +
  theme_hfv() +
  theme(axis.text.x = element_text(angle = 90, vjust = .2, size = 8)) +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "City of Lynchburg: Income distribution",
       subtitle = "In 2010 and 2021",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B25118.") 

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_dist_plot,
         height_svg = 4)
} else {
  
  local_dist_plot
  
}

```

```{r}
#| label: med-inc

b25119_data <- read_rds("data/b25119_cpi.rds") %>% 
  mutate(NAME = str_remove_all(NAME, ", Virginia")) %>% 
  filter(NAME == "Lynchburg city")

local_inc <- b25119_data %>% 
  select(county = NAME, year, tenure, dollars21, cdollars)



local_inc_plot <- ggplot(local_inc,
                         aes(x = year,
                             y = dollars21,
                             color= tenure)) +
  geom_line() +
  geom_point_interactive(
    aes(data_id = dollars21,
        tooltip = dollar_format()(dollars21)),
    size = 1) +
  theme_hfv() +
  scale_color_hfv() +
  scale_y_continuous(labels = dollar_format()) +
  labs(title = "Median household income by tenure",
       subtitle = "From 2010 to 2021 in 2021 adjusted dollars",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B25119 and Bureau of Labor Statistics, Consumer Price Index Retroactive Series.") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90, vjust = 0.5))

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_inc_plot,
         height_svg = 4)
} else {
  
  local_inc_plot

}


```

```{r}
#| label: race-inc

b19013_data <- read_rds("data/b19013_data.rds") %>% 
  filter(NAME == "Lynchburg city")

local_rinc <- b19013_data %>% 
  select(county = NAME, year, race, cdollars = estimate, dollars21) %>% 
  filter(year == 2021 | year == 2010) %>% 
  drop_na()
  
local_rinc_plot <- ggplot(local_rinc,
       aes(x = reorder_within(race, dollars21, year),
           y = dollars21,
           fill = race,
           data_id = dollars21,
           tooltip = dollar_format()(dollars21))) +
  geom_col(stat = "identity", position = "dodge") +
  geom_col_interactive() +
  theme_hfv() +
  scale_fill_hfv() + 
  scale_x_reordered() +
  facet_wrap(~year, scales = "free_x") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
        legend.position = "right") +
  scale_y_continuous(labels = dollar_format()) +
  labs(title = "Median household income by race and ethnicity",
       subtitle = "In 2021 inflation-adjusted dollars",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B19013B - I.")

if (knitr::is_html_output()){
  
  girafe(ggobj = local_rinc_plot,
         height_svg = 4)
  
} else {
  
  local_rinc_plot
}
  


```


## Housing stock

```{r}
#| label: structure

b25127_data <- read_rds("data/b25127_data.rds") 

local_str <- b25127_data %>% 
  select(county = NAME, year, tenure, structure, estimate) %>% 
  group_by(year, county, tenure, structure) %>% 
  summarise(estimate = sum(estimate)) %>% 
  filter(year == 2010 | year == 2021) %>% 
  group_by(year) %>% 
  transform(pct = estimate/sum(estimate)) %>% 
  mutate(county = fct_reorder(county, pct, .desc = TRUE)) %>% 
  filter(year == 2021) %>% 
  filter(county == "Lynchburg city")

level_order <- c("Single-family", "2 to 4 units", "5 to 19 units", "20 or more units", "Other")

local_str_plot <- ggplot(local_str,
       aes(x = factor(structure, level = level_order),
           y = pct,
           fill = tenure)) +
  geom_col(position = "stack") +
  facet_wrap(~tenure, nrow = 1) +
  theme_hfv() +
  scale_fill_hfv() + 
  scale_y_continuous(labels = percent_format()) +
  theme(legend.position = "right",
        strip.text = element_blank()) + 
   scale_x_discrete(labels = function(x) str_wrap(x, width = 8)) +
  labs(title = "Distribution of housing stock in Lynchburg in relation to the region",
      subtitle = "Percent of total occupied housing in 2021",
      caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B25127.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = local_str_plot,
         height_svg = 4)
  
} else {
  
  local_str_plot
  
}


```

```{r}
#| label: mhc


mhc <- st_read("https://services1.arcgis.com/Hp6G80Pky0om7QvQ/arcgis/rest/services/Mobile_Home_Parks/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson", quiet = TRUE) |> 
  filter(STATE == "VA") %>% 
  filter(str_detect(COUNTY, "LYNCHBURG"))

leaflet(mhc) %>% 
  addTiles() %>% 
  addCircleMarkers()



```

```{r}
#| label: fig-mhc-county


lburg_mhc <- mhc%>% 
  group_by(SIZE) %>% 
  summarise(count = n_distinct(OBJECTID)) %>% 
  st_drop_geometry()

ggplot(lburg_mhc,
       aes(x = SIZE,
           y = count,
           fill = SIZE)) +
  geom_col(position = "dodge") +
  theme_hfv() +
  scale_fill_hfv() +
  scale_y_continuous(breaks = seq(0,15, by = 2), limits = c(0,15))


```

```{r}
#| label: bps

lburg_cbps <- read_rds("data/cv_cbps.rds") %>% 
  filter(NAMELSAD == "Lynchburg city")

lburg_cbps_plot <- ggplot(lburg_cbps,
       aes(x = year,
           y = units, 
           fill = type, 
           data_id = units,
           tooltip = label_comma()(units))) +
  geom_col(position = "dodge") + 
  geom_col_interactive() +
  facet_grid(~type) +
  theme_hfv() +
  scale_fill_hfv() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
  scale_x_continuous(breaks = seq(from = 2000, to = 2022, by = 2.0)) +
  labs(title = "Residential building permits by unit type",
       subtitle = "From 2000 through 2022",
       caption = "**Source:** U.S. Census Bureau, Building Permits Survey.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = lburg_cbps_plot,
         height_svg = 4)
  
} else {
  
  lburg_cbps_plot
}

```

## Homeownership market

```{r}
#| label: ho

# Read in saved tenure data.

b25003_data <- read_rds("data/b25003_data.rds") 

# Clean the data and calculate homeownership rate.

ho_rate <- b25003_data %>%
  select(county = NAME, year, tenure, estimate) %>% # Change "NAME" field to "county".
  filter(county == "Lynchburg city") %>% # Filter for Lynchburg only.
  group_by(year) %>% # Calculate percent of total by year to get homeownership rate.
  mutate(pct = estimate/sum(estimate)) %>%  
  filter(tenure == "Homeowner") # Retain only homeowners to get the homeownership rate.

cv_ho_plot <- ggplot(ho_rate,
       aes(x = year, 
           y = pct)) +
  geom_line(size = 0.5) +
  geom_point_interactive(
    aes(data_id = pct,
        tooltip = percent_format()(pct)),
    size = 1) +
  theme_hfv() +
  scale_color_hfv() +
  scale_y_continuous(labels = percent_format()) +
  scale_x_continuous(breaks = seq(from = 2010, to = 2021, by = 1)) +
  labs(title = "Homeownership rate",
       subtitle = "From 2010 to 2021",
       caption = "**Source:** U.S. Census Bureau, ACS 5-Year Estimates, Table B25003.")

if (knitr::is_html_output()) {
  
  girafe(ggobj = cv_ho_plot,
         height_svg = 4)
} else {
  
  cv_ho_plot
}


```


## Rental market

```{r}
#| label: rent

# Utilize CoStar properties search for Multi-Family. Filter by County for Lynchburg - VA Market. Then review Analytics and pull QUARTERLY Market Asking Rent Per Unit for entire region. Do not bring in Forecast and set History to All. Combine Bedford City and Bedford County.

# Download data for current rent and inflation-adjusted rent into a single csv - name [locality_abbv]_rent.csv --- for example amherst_rent.csv or lburg_rent.csv

# Merge all data into a single csv named - local_rent.csv

# Note the download date of data here: 1/23/2023

# Read in downloaded data for Lynchburg rent.

 lburg_rent <- read_csv("data/lburg_rent.csv") %>% 
  mutate(county = "Lynchburg city") # Create a field for the locality name.


library(zoo)
library(lubridate)

local_rent <- lburg_rent %>% 
  filter(!str_detect(period, "QTD")) %>% # Remove QTD values.
  mutate(period = as.Date(as.yearqtr(period, format = "%Y Q%q"), frac = 1)) %>%  # Convert quarter dates to readable dates.
  select(county, period, current, inf) %>% 
  pivot_longer(3:4, # Pivot data to create tabular data.
               names_to = "value",
               values_to = "rent") %>% 
  mutate(value = case_when(
    value == "current" ~ "Current dollars",
    value == "inf" ~ "Inflation-adjusted dollars")) %>% 
  mutate(year = year(period)) %>% 
  filter(year >= 2015)
  

local_rent_plot <- ggplot(local_rent,
       aes(x = period,
           y = rent,
           linetype = value,
           color = value)) +
  geom_line(size = 0.5) + 
  geom_point_interactive(aes(
    data_id = rent,
    tooltip = dollar_format()(rent))) +
  scale_linetype_manual(values = c("dotted", "solid")) +
  theme_hfv() +
  scale_color_hfv() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
        legend.position = "bottom") +
  scale_y_continuous(labels = dollar_format()) +
  labs(title = "Quarterly average rent",
       caption = "**Source:** CoStar Group Inc.")
  

  
if (knitr::is_html_output()) {
  
  girafe(ggobj = local_rent_plot,
         height_svg = 4)
  
} else {
  
  local_rent_plot
  
}



```

```{r}
#| label: vacancy

# Utilize CoStar properties search for Multi-Family. Filter by County for Lynchburg - VA Market. Then review Analytics and pull QUARTERLY Vacancy Rate for entire region. Do not bring in Forecast and set History to All.

# Download data into csv - name [locality_abbv]_vacancy.csv --- for example amherst_vacancy.csv or lburg_vacancy.csv

# Note the download date of data here: 




```



```{r}
#| label: parcel-data
#| eval: false


parcels <- st_read("https://mapviewer.lynchburgva.gov/ArcGIS/rest/services/OpenData/ODPDynamic/MapServer/41/query?outFields=*&where=1%3D1&f=geojson", quiet = TRUE) %>% 
  st_point_on_surface()

write_rds(parcels, "data/parcels.rds")

```


```{r}
#| label: sfr

# The following investigates the number of single-family detached homes that are being utilized as rentals. There is a growing concern over homeownership rates in the city. The current market incentivizes the rental of single-family homes over the sale.

wards <- st_read("https://mapviewer.lynchburgva.gov/ArcGIS/rest/services/OpenData/ODPStatic/MapServer/62/query?outFields=*&where=1%3D1&f=geojson", quiet = TRUE)

parcels <- read_rds("data/parcels.rds")

residential <- parcels %>%
  clean_names() %>% 
  select(parcel_id, loc_addr, loc_city, loc_zip, owner1, mail_addr, mail_city, mail_stat, mail_zip, pc_desc, yr_built, current_land, current_imp) %>% 
  filter(str_detect(pc_desc, "DETACHED SNG FAM")) %>% 
  st_join(left = FALSE, wards["Designation"])

library(stringdist)

residential$match_score <- stringsim(residential$loc_addr, residential$mail_addr)

# ggplot(residential,
#        aes(x = match_score)) +
#   geom_histogram(bins = 30) +
#   theme_minimal()
# 
# set.seed(1983)
# 
# fuzzy_matches <- residential %>%
#   filter(match_score >= 0.75 & match_score <= 0.9) %>%
#   st_drop_geometry() %>%
#   slice_sample(n = 100)

res_own <- residential %>% 
  mutate(address_num = str_extract(loc_addr, "[0-9]+"),
         owner_num = str_extract(mail_addr, "[0-9]+")) %>% 
  filter(current_imp > 0) %>% 
  mutate(ownership = case_when(
    match_score > 0.6 & address_num == owner_num ~ "Owner-occupied SFD",
    TRUE ~ "SFR")
  )

sfr <- res_own %>% 
  filter(ownership == "SFR")

hex_grid <- st_make_grid(sfr, n = c(25,25),
                         what = "polygons", square = FALSE)

hex_grid_sf <- st_sf(hex_grid) %>% 
  mutate(grid_id = 1:length(lengths(hex_grid)))

hex_grid_sf$n_pts <- lengths(st_intersects(hex_grid_sf, sfr))

hex_count <- filter(hex_grid_sf, n_pts > 4)

library(mapview)

mapview(hex_count,
        zcol = "n_pts",
        layer.name = "Estimate")

```

```{r}
#| label: sfr-ward

sfr_ward <- sfr %>% 
  group_by(Designation) %>% 
  summarise(count = n_distinct(parcel_id)) %>% 
  st_drop_geometry()

ggplot(sfr_ward,
       aes(x = Designation,
           y = count,
           fill = Designation,
           data_id = count,
           tooltip = number_format(big.mark = ",")(count))) +
  geom_col(position = "dodge") +
  theme_hfv() +
  scale_fill_hfv() +
  labs(title = "Estimate of single-family detached rentals",
       caption = "**Source:** Lynchburg city parcel data") 




```

```{r}
#| label: nhpd-data


nhpd_prop <- read_csv("data/nhpd_properties.csv") %>% 
  clean_names() %>% 
  filter(property_status != "Inactive") %>% 
  filter(grepl("lynchburg", city, ignore.case = TRUE))

nhpd_subsidies <- read_csv("data/nhpd_subsidies.csv") %>% 
  clean_names() %>% 
  filter(subsidy_status != "Inactive") %>% 
  filter(grepl("lynchburg", city, ignore.case = TRUE))

```



```{r}
#| label: gap-data

tb_18c <- read_csv("data/Table18C_2012to2019.csv")

colnames(tb_18c)[16] <- "Cost"

renter <- tb_18c %>% 
  clean_names() %>% 
  filter(line_type == "Detail") %>% 
  select(county, fips, year, estimate, tenure, cost, household_income) %>% 
  group_by(county, fips, year, tenure, cost, household_income) %>% 
  summarise(estimate = sum(estimate)) %>% 
  filter(fips == lburg)


tb_18_match <- renter %>% 
  filter(tenure == "Renter occupied") %>% 
  mutate(cost = case_when(
    cost == "greater than RHUD30 and less than or equal to RHUD50" ~ "31 to 50 percent AMI",
    cost == "greater than RHUD50 and less than or equal to RHUD80" ~ "51 to 80 percent AMI",
    cost == "greater than RHUD80" ~ "80 percent AMI or greater",
    cost == "less than or equal to RHUD30" ~ "30 percent AMI or below"
  )) %>% 
  mutate(household_income = case_when(
    household_income == "greater than 100% of HAMFI" ~ "80 percent AMI or greater",
    household_income == "greater than 80% of HAMFI but less than or equal to 100% of HAMFI" ~ "80 percent AMI or greater",
    household_income == "greater than 50% of HAMFI but less than or equal to 80% of HAMFI" ~ "51 to 80 percent AMI",
    household_income == "greater than 30% of HAMFI but less than or equal to 50% of HAMFI" ~ "31 to 50 percent AMI",
    household_income == "less than or equal to 30% of HAMFI" ~ "30 percent AMI or below"
  )) |>
  group_by(county, fips, year, cost, household_income) %>% 
  summarise(estimate = sum(estimate))


tb_18_match <- tb_18_match %>% 
  mutate(match = case_when(
    cost == household_income ~ "Affordable",
    cost == "30 percent AMI or below" & household_income == "31 to 50 percent AMI" ~ "Very affordable",
    cost == "30 percent AMI or below" & household_income == "51 to 80 percent AMI" ~ "Very affordable",
    cost == "30 percent AMI or below" & household_income == "80 percent AMI or greater" ~ "Very affordable",
        cost == "31 to 50 percent AMI" & household_income == "31 to 50 percent AMI" ~ "Affordable",
    cost == "31 to 50 percent AMI" & household_income == "51 to 80 percent AMI" ~ "Very affordable",
    cost == "31 to 50 percent AMI" & household_income == "80 percent AMI or greater" ~ "Very affordable",
        cost == "31 to 50 percent AMI" & household_income == "30 percent AMI or below" ~ "Unaffordable",
    cost == "51 to 80 percent AMI" & household_income == "30 percent AMI or below" ~ "Unaffordable",
        cost == "51 to 80 percent AMI" & household_income == "31 to 50 percent AMI" ~ "Unaffordable",
    cost == "51 to 80 percent AMI" & household_income == "80 percent AMI or greater" ~ "Very affordable",
    cost == "80 percent AMI or greater" & household_income == "30 percent AMI or below" ~ "Unaffordable",
    cost == "80 percent AMI or greater" & household_income == "31 to 50 percent AMI" ~ "Unaffordable",
    cost == "80 percent AMI or greater" & household_income == "51 to 80 percent AMI" ~ "Unaffordable"
  )) %>% 
  mutate(gapcode = case_when(
    match == "Unaffordable" ~ "Gap",
    TRUE ~ "Matches or less than income"
  ))

write_rds(tb_18_match, "data/tb_18_match.rds")

```
```{r}

gap <- tb_18_match %>% 
  group_by(year, household_income, gapcode) %>% 
  summarise(estimate = sum(estimate)) %>% 
  mutate(estimate = case_when(
    gapcode == "Gap" ~ estimate * -1,
    gapcode == "Matches or less than income" ~ estimate
  )) %>% 
  filter(household_income != "80 percent AMI or greater") %>% 
  mutate(gapcode = case_when(
    gapcode == "Gap" ~ "Unaffordable",
    TRUE ~ "Affordable"
  ))

ggplot(gap,
       aes(x = year, 
           y = estimate,
           fill = gapcode)) +
  geom_col() +
  facet_grid(~household_income) +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Rental housing gap by AMI",
       subtitle = "2012 to 2019",
       fill = "Affordability of current home") +
  theme(
    legend.position = "bottom",
    axis.title = element_blank(),
    panel.background = element_blank(),
    panel.grid.major.y = element_line(color = "grey95",
                                      size = 0.05),
    axis.ticks = element_blank()
  )


```

```{r}
#| label: hcv-data
#| eval: false

hcv <- st_read("https://services.arcgis.com/VTyQ9soqVukalItT/arcgis/rest/services/Housing_Choice_Vouchers_by_Tract/FeatureServer/0/query?f=json&where=(STATE%20IN%20('51'))&outFields=*", quiet = TRUE)

write_rds(hcv, "data/hcv.rds")

```

```{r}
#| label: hcv-map

hcv <- read_rds("data/hcv.rds") %>% 
  st_transform(crs = 4326) %>% 
  clean_names() %>% 
  filter(county == 680)

palette <- colorNumeric(palette = "viridis", domain = hcv$hcv_pct_renter_occ_units, na.color = "transparent")

leaflet(hcv) %>% 
  addTiles() %>% 
  addPolygons(fillColor = ~palette(hcv_pct_renter_occ_units),
              fillOpacity = 1)


```



```{r}
#| label: rprops

# Utilize CoStar properties search for Multi-Family. Filter for City of Lynchburg.

# Download property-level data export, including lat/long.


```


```{r}
#| label: costar-rent

# Utilize CoStar properties search for Multi-Family. Filter by County for Lynchburg - VA Market. Then review Analytics and pull QUARTERLY Market Asking Rent Per Unit for entire region. Do not bring in Forecast and set History to All.

# Download data for current rent and inflation-adjusted rent into a single csv - name [locality_abbv]_rent.csv --- for example amherst_rent.csv or lburg_rent.csv

# Merge all data into a single csv named - local_rent.csv

# Note the download date of data here: 




```

## Homeownership market




